#!/usr/bin/env python3

import subprocess
import shlex
import json
import re
import sys

PR_TRAIN_CONTENTS_PATTERN = r"<pr-train-toc>(.*)</pr-train-toc>"


class Colors:
    GREEN = "\033[92m"
    NONE = "\033[0m"


def git_branchless_query_branches(query):
    p = subprocess.run(
        ["git", "branchless", "query", "-b", query], capture_output=True, text=True
    )
    branches = p.stdout.split("\n")
    return branches


def get_open_prs():
    """
    Returns list of open pull requests from GitHub
    """
    p = subprocess.run(
        shlex.split("gh pr list -A '@me' --json 'number,baseRefName,headRefName,body'"),
        capture_output=True,
        text=True,
    )
    return json.loads(p.stdout)


def get_pr_train_branches(branch):
    """
    Return a list of strings containing branch names in the commit stack of the given branch
    """
    p = subprocess.run(
        [
            "git",
            "branchless",
            "query",
            "-b",
            f"stack() & (ancestors({branch}) + descendants({branch}))",
        ],
        capture_output=True,
        text=True,
    )
    return p.stdout.strip().split("\n")


def get_base_branch(branch):
    """
    For a given branch, return it's base/parent branch.
    """
    p = subprocess.run(
        ["git", "branchless", "query", "-b", f"ancestors({branch}) - {branch} - green"],
        capture_output=True,
        text=True,
    )
    return p.stdout.strip().split("\n")[-1] or "master"


def edit_github_pr(branch, base_branch, body):
    edit_command = ["gh", "pr", "edit", branch, "-B", base_branch, "-b", body]
    p = subprocess.run(edit_command, capture_output=True, text=True)
    if p.returncode:
        raise Exception(p.stderr)


def get_pr_train_contents(body):
    result = re.search(PR_TRAIN_CONTENTS_PATTERN, body, re.S)
    return result.group(1) if result else None


def upsert_pr_train_contents_to_body(body, pr_train_contents):
    """
    Updates or appends PR train contents to the given body.
    """
    if get_pr_train_contents(body):
        return re.sub(
            PR_TRAIN_CONTENTS_PATTERN,
            f"<pr-train-toc>{pr_train_contents}</pr-train-toc>",
            body,
            flags=re.S,
        )
    return f"{body}\n\n<pr-train-toc>{pr_train_contents}</pr-train-toc>\n"


def get_pr_train_numbers_from_contents(pr_train_contents):
    return re.findall(r"#(\d+)", pr_train_contents)


def is_pr_merged(pr_number):
    """
    Returns whether the given pr number is merged
    """
    p = subprocess.run(
        shlex.split(f"gh pr view --json state {int(pr_number)}"),
        capture_output=True,
        text=True,
    )
    result = json.loads(p.stdout)
    return result["state"] == "MERGED"


def main():
    query = sys.argv[1] if len(sys.argv) == 2 else "stack()"

    branches = git_branchless_query_branches(query)
    open_prs = get_open_prs()

    branch_pr_map = {pr["headRefName"]: pr for pr in open_prs}
    branches_with_pr = [branch for branch in branches if branch_pr_map.get(branch)]

    for i, branch in enumerate(branches_with_pr):

        base_branch = get_base_branch(branch)

        pr = branch_pr_map[branch]

        pr_train = get_pr_train_branches(branch)

        new_pr_train_numbers = [
            branch_pr_map[branch]["number"]
            for branch in pr_train
            if branch_pr_map.get(branch)
        ]

        old_pr_train_contents = get_pr_train_contents(pr["body"])
        old_pr_train_numbers = (
            get_pr_train_numbers_from_contents(old_pr_train_contents)
            if old_pr_train_contents
            else []
        )
        prs_not_in_current = [
            number
            for number in old_pr_train_numbers
            if number not in new_pr_train_numbers
        ]
        merged_prs = [number for number in prs_not_in_current if is_pr_merged(number)]

        pr_train_numbers = merged_prs + new_pr_train_numbers

        pr_train_list = "\n".join(
            [
                f"- #{number} üìç" if pr["number"] == number else f"- #{number}"
                for number in pr_train_numbers
            ]
        )

        pr_train_contents = (
            f"\n\n## PR Train\n\n{pr_train_list}\n\n" if pr_train_numbers else ""
        )
        body = upsert_pr_train_contents_to_body(pr["body"], pr_train_contents)

        if body == pr["body"] and base_branch == pr["baseRefName"]:
            print(f"Skipped {Colors.GREEN}{branch}{Colors.NONE}")
            continue

        edit_github_pr(branch, base_branch, body)
        print(f"Updated {Colors.GREEN}{branch}{Colors.NONE}")


if __name__ == "__main__":
    main()
